#Примеры опробованных моделей. 
#Модель Simpl - простейшая полносвязная модель из 3 слоёв.
#Модель CNN - пример реккурентной свёрточной неёросети 
#Модель SwTr - модель SwinTransformer, значительно более сложная.  
#Эта модель использует иерархический подход к обработке изображений, используя последовательность блоков, которые постепенно уменьшают размер изображения, экстрагируя все более абстрактные признаки.  
#Это позволяет ей быть эффективной как в плане вычислительных ресурсов, так и качества результатов.
#Однако в моём случае данная модель показала себя не с лучшей стороны, вероятно из-за черезмерной сложности для моих простых примеров для обучения (использовались простые геом. фигуры, цвета RGB, изображения волков и зайцев)


###################################
class Simpl(nn.Module):

	def __init__(self,x):
		super().__init__()
		self.fc1 = nn.Linear(12288, 84)
		self.fc2 = nn.Linear(84, 50)
		self.fc3 = nn.Linear(50,2)

	def forward(self,x):
		x = x.view(-1, 12288)
		x = F.relu(self.fc1(x))
		x = F.relu(self.fc2(x))
		x = self.fc3(x)
		return x

#################################
class CNN(nn.Module):
	def __init__(self,x, num_classes=2):

		super().__init__()
		self.features = nn.Sequential(
			nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2),
			nn.ReLU(),
			nn.MaxPool2d(kernel_size=3, stride=2),
			nn.Conv2d(64, 192, kernel_size=5, padding=2),
			nn.ReLU(),
			nn.MaxPool2d(kernel_size=3, stride=2),
			nn.Conv2d(192, 384, kernel_size=3, padding=1),
			nn.ReLU(),
			nn.Conv2d(384, 256, kernel_size=3, padding=1),
			nn.ReLU(),
			nn.Conv2d(256, 256, kernel_size=3, padding=1),
			nn.ReLU(),
			nn.MaxPool2d(kernel_size=3, stride=2),
		)
		self.avgpool = nn.AdaptiveAvgPool2d((6, 6))
		self.classifier = nn.Sequential(
			nn.Dropout(),
			nn.Linear(256 * 6 * 6, 4096),
			nn.ReLU(),
			nn.Dropout(),
			nn.Linear(4096, 4096),
			nn.ReLU(),
			nn.Linear(4096, num_classes)
		)
	def forward(self, x):
		x = self.features(x)
		x = self.avgpool(x)
		x = torch.flatten(x, 1)
		x = self.classifier(x)
		return x

##################################
class SwTr(nn.Module):
	def __init__(self,x, num_classes=3):
		super().__init__()
		self.model = timm.create_model('swin_tiny_patch4_window7_224', pretrained=True, num_classes=3)

	def forward(self, x):
		return self.model(x)
